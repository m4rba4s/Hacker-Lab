/**
 * Comprehensive Reverse Engineering Lessons
 * Theory, examples, and practical exercises
 */

export const FULL_LESSONS = {
    "hello_world": {
        title: "Hello World Analysis",
        difficulty: "beginner",
        theory: `
            <h2>üéØ Introduction to Reverse Engineering</h2>
            <p>Clean, professional English content for production release.</p>
        `,
        practice: `<h3>üìù Practice</h3><p>Analyze assembly code structure.</p>`,
        solution: `<h3>‚úÖ Solution</h3><p>Entry point identification and basic RE.</p>`,
        tips: ["Use professional tools", "Follow systematic approach"]
    }
};

// Export for UI
window.FULL_LESSONS = FULL_LESSONS;
            
            <h3>–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</h3>
            <ul>
                <li><b>–î–∏–∑–∞—Å—Å–µ–º–±–ª–µ—Ä</b> - –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –º–∞—à–∏–Ω–Ω—ã–π –∫–æ–¥ –≤ –∞—Å—Å–µ–º–±–ª–µ—Ä (IDA Pro, Ghidra, x64dbg)</li>
                <li><b>–û—Ç–ª–∞–¥—á–∏–∫</b> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—à–∞–≥–æ–≤–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É (GDB, x64dbg, WinDbg)</li>
                <li><b>Hex-—Ä–µ–¥–∞–∫—Ç–æ—Ä</b> - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</li>
                <li><b>–î–µ–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä</b> - –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–æ–¥</li>
            </ul>
            
            <h3>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ ELF/PE —Ñ–∞–π–ª–∞:</h3>
            <pre class="code-block">
ELF Header:
  Magic:   7f 45 4c 46 (\\x7fELF)
  Class:   64-bit
  Entry:   0x401000
  
Sections:
  .text   - –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –∫–æ–¥
  .data   - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  .rodata - –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (—Å—Ç—Ä–æ–∫–∏)
  .bss    - –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            </pre>
            
            <h3>–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - Hello World</h3>
            <p>–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è. –í –∞—Å—Å–µ–º–±–ª–µ—Ä–µ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:</p>
            
            <pre class="code-block">
section .data
    msg db 'Hello, World!', 0xa  ; —Å—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å—Ç—Ä–æ–∫–∏
    len equ $ - msg               ; –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
    
section .text
    global _start
    
_start:
    ; sys_write(stdout, msg, len)
    mov rax, 1      ; —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤ write
    mov rdi, 1      ; stdout
    mov rsi, msg    ; –∞–¥—Ä–µ—Å —Å—Ç—Ä–æ–∫–∏
    mov rdx, len    ; –¥–ª–∏–Ω–∞
    syscall
    
    ; sys_exit(0)
    mov rax, 60     ; —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤ exit
    xor rdi, rdi    ; –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ 0
    syscall
            </pre>
        `,
        practice: `
            <h3>üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h3>
            
            <ol>
                <li>–ù–∞–π–¥–∏—Ç–µ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã (Entry Point)</li>
                <li>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è</li>
                <li>–ù–∞–π–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã write –∏ exit</li>
                <li>–ò–∑–º–µ–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É "Hello, World!" –Ω–∞ —Å–≤–æ—é</li>
            </ol>
            
            <h4>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</h4>
            <ul>
                <li>–°—Ç—Ä–æ–∫–∏ –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–µ–∫—Ü–∏–∏ .rodata –∏–ª–∏ .data</li>
                <li>–°–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π syscall (Linux) –∏–ª–∏ int 0x80</li>
                <li>–†–µ–≥–∏—Å—Ç—Ä RAX —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞</li>
            </ul>
        `,
        solution: `
            <h3>‚úÖ –†–µ—à–µ–Ω–∏–µ</h3>
            
            <p><b>1. Entry Point:</b> 0x401000 (—Å–º–æ—Ç—Ä–∏–º –≤ ELF header)</p>
            
            <p><b>2. –°—Ç—Ä–æ–∫–∞:</b> –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É –≤ —Å–µ–∫—Ü–∏–∏ .rodata</p>
            <pre>
.rodata:00402000  48 65 6C 6C 6F 2C 20 57  Hello, W
.rodata:00402008  6F 72 6C 64 21 0A 00 00  orld!...
            </pre>
            
            <p><b>3. –°–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã:</b></p>
            <pre>
0x401000: mov rax, 1     ; sys_write
0x401007: mov rdi, 1     ; stdout
0x40100e: lea rsi, [rip+0x1000] ; –∞–¥—Ä–µ—Å —Å—Ç—Ä–æ–∫–∏
0x401015: mov rdx, 14    ; –¥–ª–∏–Ω–∞
0x40101c: syscall
            </pre>
            
            <p><b>4. –ü–∞—Ç—á–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏:</b></p>
            <p>–û—Ç–∫—Ä—ã–≤–∞–µ–º hex-—Ä–µ–¥–∞–∫—Ç–æ—Ä, –∏–¥—ë–º –Ω–∞ –∞–¥—Ä–µ—Å 0x2000 (offset –≤ —Ñ–∞–π–ª–µ) –∏ –º–µ–Ω—è–µ–º –±–∞–π—Ç—ã.</p>
        `,
        tips: [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'strings' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫",
            "–í x64dbg –Ω–∞–∂–º–∏—Ç–µ F9 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–æ —Ç–æ—á–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∞",
            "–ö–ª–∞–≤–∏—à–∞ G –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É"
        ]
    },

    "variables": {
        title: "Understanding Variables",
        difficulty: "beginner",
        theory: `
            <h2>üî¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏</h2>
            
            <h3>–¢–∏–ø—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∏—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ:</h3>
            
            <table class="data-table">
                <tr>
                    <th>–¢–∏–ø</th>
                    <th>–†–∞–∑–º–µ—Ä</th>
                    <th>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ</th>
                    <th>–í—Ä–µ–º—è –∂–∏–∑–Ω–∏</th>
                </tr>
                <tr>
                    <td>–õ–æ–∫–∞–ª—å–Ω—ã–µ</td>
                    <td>Varies</td>
                    <td>Stack</td>
                    <td>–î–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏</td>
                </tr>
                <tr>
                    <td>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ</td>
                    <td>Varies</td>
                    <td>.data/.bss</td>
                    <td>–í—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</td>
                </tr>
                <tr>
                    <td>–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ</td>
                    <td>Varies</td>
                    <td>Heap</td>
                    <td>–î–æ free()</td>
                </tr>
                <tr>
                    <td>–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ</td>
                    <td>Varies</td>
                    <td>.data/.bss</td>
                    <td>–í—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</td>
                </tr>
            </table>
            
            <h3>–°—Ç–µ–∫–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</h3>
            <pre class="code-block">
push rbp           ; —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π base pointer
mov rbp, rsp       ; —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π frame
sub rsp, 0x20      ; –≤—ã–¥–µ–ª—è–µ–º 32 –±–∞–π—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

; int a = 10
mov dword [rbp-0x4], 10   ; a –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É rbp-4

; int b = 20  
mov dword [rbp-0x8], 20   ; b –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É rbp-8

; int c = a + b
mov eax, [rbp-0x4]         ; –∑–∞–≥—Ä—É–∂–∞–µ–º a –≤ eax
add eax, [rbp-0x8]         ; –¥–æ–±–∞–≤–ª—è–µ–º b
mov [rbp-0xc], eax         ; —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ c
            </pre>
            
            <h3>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</h3>
            <pre class="code-block">
section .data
    global_int    dd 42        ; 4 –±–∞–π—Ç–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    global_str    db "Test", 0 ; —Å—Ç—Ä–æ–∫–∞
    
section .bss
    buffer        resb 256     ; 256 –±–∞–π—Ç, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    counter       resd 1       ; 4 –±–∞–π—Ç–∞ –¥–ª—è int
            </pre>
            
            <h3>–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏:</h3>
            <p>–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞:</p>
            <pre class="code-block">
struct Example {
    char  c;     // 1 –±–∞–π—Ç  [0x00]
    // padding    // 3 –±–∞–π—Ç–∞ [0x01-0x03]
    int   i;     // 4 –±–∞–π—Ç–∞ [0x04-0x07]
    char  c2;    // 1 –±–∞–π—Ç  [0x08]
    // padding    // 7 –±–∞–π—Ç  [0x09-0x0F]
    long  l;     // 8 –±–∞–π—Ç  [0x10-0x17]
}; // –ò—Ç–æ–≥–æ: 24 –±–∞–π—Ç–∞ –≤–º–µ—Å—Ç–æ 14
            </pre>
        `,
        practice: `
            <h3>üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h3>
            
            <p>–î–∞–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:</p>
            <pre class="code-block">
int global_var = 100;

int main() {
    int local_a = 10;
    int local_b = 20;
    static int static_var = 30;
    
    int* heap_var = malloc(sizeof(int));
    *heap_var = 40;
    
    int result = local_a + local_b + static_var + *heap_var + global_var;
    
    free(heap_var);
    return result;
}
            </pre>
            
            <h4>–ó–∞–¥–∞–Ω–∏—è:</h4>
            <ol>
                <li>–ù–∞–π–¥–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –¥–∏–∑–∞—Å—Å–µ–º–±–ª–µ—Ä–µ</li>
                <li>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –≤ –∫–∞–∫–æ–π —Å–µ–∫—Ü–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–∞–∂–¥–∞—è</li>
                <li>–ò–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ global_var –Ω–∞ 200</li>
                <li>–û—Ç—Å–ª–µ–¥–∏—Ç–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ heap –ø–∞–º—è—Ç–∏</li>
            </ol>
        `,
        solution: `
            <h3>‚úÖ –†–µ—à–µ–Ω–∏–µ</h3>
            
            <p><b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:</b></p>
            <ul>
                <li><code>global_var</code> - —Å–µ–∫—Ü–∏—è .data, –∞–¥—Ä–µ—Å 0x404020</li>
                <li><code>static_var</code> - —Å–µ–∫—Ü–∏—è .data, –∞–¥—Ä–µ—Å 0x404024</li>
                <li><code>local_a</code> - —Å—Ç–µ–∫, [rbp-0x4]</li>
                <li><code>local_b</code> - —Å—Ç–µ–∫, [rbp-0x8]</li>
                <li><code>heap_var</code> - —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ heap, –∞–¥—Ä–µ—Å –≤–æ–∑–≤—Ä–∞—â—ë–Ω–Ω—ã–π malloc</li>
            </ul>
            
            <p><b>–ê—Å—Å–µ–º–±–ª–µ—Ä–Ω—ã–π –∫–æ–¥:</b></p>
            <pre class="code-block">
; local_a = 10
mov dword [rbp-0x4], 0xa

; local_b = 20  
mov dword [rbp-0x8], 0x14

; heap_var = malloc(4)
mov edi, 4
call malloc
mov [rbp-0x10], rax  ; —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å

; *heap_var = 40
mov rax, [rbp-0x10]
mov dword [rax], 0x28
            </pre>
        `,
        tips: [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'x/10x $rsp' –≤ GDB –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–µ–∫–∞",
            "–ö–æ–º–∞–Ω–¥–∞ 'info variables' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ",
            "Heap allocations –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —á–µ—Ä–µ–∑ breakpoint –Ω–∞ malloc/free"
        ]
    },

    // CONTROL FLOW MODULE
    "conditions": {
        title: "Conditional Statements",
        difficulty: "intermediate",
        theory: `
            <h2>üîÄ –£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ –≤–µ—Ç–≤–ª–µ–Ω–∏—è</h2>
            
            <h3>–§–ª–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ x86-64:</h3>
            <table class="data-table">
                <tr>
                    <th>–§–ª–∞–≥</th>
                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th>–£—Å–ª–æ–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏</th>
                </tr>
                <tr>
                    <td>ZF</td>
                    <td>Zero Flag</td>
                    <td>–†–µ–∑—É–ª—å—Ç–∞—Ç = 0</td>
                </tr>
                <tr>
                    <td>SF</td>
                    <td>Sign Flag</td>
                    <td>–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π</td>
                </tr>
                <tr>
                    <td>CF</td>
                    <td>Carry Flag</td>
                    <td>–ë–µ–∑–∑–Ω–∞–∫–æ–≤–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ</td>
                </tr>
                <tr>
                    <td>OF</td>
                    <td>Overflow Flag</td>
                    <td>–ó–Ω–∞–∫–æ–≤–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ</td>
                </tr>
            </table>
            
            <h3>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:</h3>
            <pre class="code-block">
CMP a, b     ; –≤—ã—á–∏—Å–ª—è–µ—Ç a - b, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏
TEST a, b    ; –≤—ã—á–∏—Å–ª—è–µ—Ç a & b, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥–∏
            </pre>
            
            <h3>–£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:</h3>
            <pre class="code-block">
; –ë–µ–∑–∑–Ω–∞–∫–æ–≤—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
JE/JZ    - Jump if Equal/Zero (ZF=1)
JNE/JNZ  - Jump if Not Equal/Not Zero (ZF=0)
JA/JNBE  - Jump if Above (CF=0 –∏ ZF=0)
JAE/JNB  - Jump if Above or Equal (CF=0)
JB/JNAE  - Jump if Below (CF=1)
JBE/JNA  - Jump if Below or Equal (CF=1 –∏–ª–∏ ZF=1)

; –ó–Ω–∞–∫–æ–≤—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
JG/JNLE  - Jump if Greater (ZF=0 –∏ SF=OF)
JGE/JNL  - Jump if Greater or Equal (SF=OF)
JL/JNGE  - Jump if Less (SF‚â†OF)
JLE/JNG  - Jump if Less or Equal (ZF=1 –∏–ª–∏ SF‚â†OF)
            </pre>
            
            <h3>–ü–∞—Ç—Ç–µ—Ä–Ω—ã if-else:</h3>
            <pre class="code-block">
// C –∫–æ–¥:
if (x > 10) {
    y = 1;
} else {
    y = 2;
}

; –ê—Å—Å–µ–º–±–ª–µ—Ä:
cmp dword [rbp-0x4], 0xa   ; —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º x —Å 10
jle .else_branch            ; –µ—Å–ª–∏ x <= 10, –ø—Ä—ã–≥–∞–µ–º –Ω–∞ else
    mov dword [rbp-0x8], 1  ; y = 1
    jmp .end_if             ; –ø—Ä—ã–≥–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
.else_branch:
    mov dword [rbp-0x8], 2  ; y = 2
.end_if:
            </pre>
            
            <h3>Switch-case –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
            <pre class="code-block">
// C –∫–æ–¥:
switch(x) {
    case 1: func1(); break;
    case 2: func2(); break;
    case 3: func3(); break;
    default: func_default();
}

; –ê—Å—Å–µ–º–±–ª–µ—Ä (jump table):
mov eax, [rbp-0x4]         ; –∑–∞–≥—Ä—É–∂–∞–µ–º x
cmp eax, 3                 ; –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
ja .default                ; –µ—Å–ª–∏ x > 3, –∏–¥—ë–º –≤ default
lea rdx, [jump_table]      ; –∞–¥—Ä–µ—Å —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
movsxd rax, dword [rdx+rax*4] ; –±–µ—Ä—ë–º —Å–º–µ—â–µ–Ω–∏–µ
add rax, rdx               ; –≤—ã—á–∏—Å–ª—è–µ–º –∞–¥—Ä–µ—Å
jmp rax                    ; –ø—Ä—ã–≥–∞–µ–º

jump_table:
    dd case_1 - jump_table
    dd case_2 - jump_table
    dd case_3 - jump_table
            </pre>
        `,
        practice: `
            <h3>üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h3>
            
            <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:</p>
            <pre class="code-block">
0x401100: push rbp
0x401101: mov rbp, rsp
0x401104: sub rsp, 0x20
0x401108: mov [rbp-0x8], rdi      ; —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–æ–∫—É
0x40110c: mov rax, [rbp-0x8]
0x401110: movzx eax, byte [rax]   ; –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
0x401113: cmp al, 0x41            ; —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å 'A'
0x401115: jne .fail
0x401117: mov rax, [rbp-0x8]
0x40111b: movzx eax, byte [rax+1] ; –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª
0x40111f: cmp al, 0x42            ; —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å 'B'
0x401121: jne .fail
0x401123: mov rax, [rbp-0x8]
0x401127: movzx eax, byte [rax+2] ; —Ç—Ä–µ—Ç–∏–π —Å–∏–º–≤–æ–ª
0x40112b: cmp al, 0x43            ; —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å 'C'
0x40112d: jne .fail
0x40112f: mov eax, 1              ; —É—Å–ø–µ—Ö
0x401134: jmp .end
0x401136: .fail:
0x401136: xor eax, eax            ; –Ω–µ—É–¥–∞—á–∞
0x401138: .end:
0x401138: leave
0x401139: ret
            </pre>
            
            <h4>–í–æ–ø—Ä–æ—Å—ã:</h4>
            <ol>
                <li>–ö–∞–∫–æ–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è?</li>
                <li>–ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –ª–æ–≥–∏–∫—É –Ω–∞ C</li>
                <li>–ö–∞–∫ –æ–±–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É?</li>
                <li>–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥</li>
            </ol>
        `,
        solution: `
            <h3>‚úÖ –†–µ—à–µ–Ω–∏–µ</h3>
            
            <p><b>1. –ü–∞—Ä–æ–ª—å:</b> "ABC" (0x41, 0x42, 0x43)</p>
            
            <p><b>2. –ö–æ–¥ –Ω–∞ C:</b></p>
            <pre class="code-block">
int check_password(char* input) {
    if (input[0] != 'A') return 0;
    if (input[1] != 'B') return 0;
    if (input[2] != 'C') return 0;
    return 1;
}
            </pre>
            
            <p><b>3. –°–ø–æ—Å–æ–±—ã –æ–±—Ö–æ–¥–∞:</b></p>
            <ul>
                <li>–ü–∞—Ç—á–∏–º JNE –Ω–∞ JMP (–≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º)</li>
                <li>–ú–µ–Ω—è–µ–º JNE –Ω–∞ NOP (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º)</li>
                <li>–ü–∞—Ç—á–∏–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (MOV EAX, 1)</li>
            </ul>
            
            <p><b>4. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è:</b></p>
            <pre class="code-block">
mov eax, [rdi]         ; –∑–∞–≥—Ä—É–∂–∞–µ–º 4 –±–∞–π—Ç–∞
and eax, 0xFFFFFF      ; –º–∞—Å–∫–∏—Ä—É–µ–º 3 –±–∞–π—Ç–∞
cmp eax, 0x434241      ; —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å "ABC" (little-endian)
sete al                ; —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
movzx eax, al          ; —Ä–∞—Å—à–∏—Ä—è–µ–º –¥–æ int
ret
            </pre>
        `,
        tips: [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IDA Pro –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è switch tables",
            "–í GDB –∫–æ–º–∞–Ω–¥–∞ 'info registers' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–ª–∞–≥–∏",
            "–ü–ª–∞–≥–∏–Ω x64dbg 'Conditional Branch Logger' –ø–æ–º–æ–≥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ç–≤–ª–µ–Ω–∏—è"
        ]
    },

    "loops": {
        title: "Loop Structures",
        difficulty: "intermediate", 
        theory: `
            <h2>üîÑ –¶–∏–∫–ª—ã –≤ –∞—Å—Å–µ–º–±–ª–µ—Ä–µ</h2>
            
            <h3>–¢–∏–ø—ã —Ü–∏–∫–ª–æ–≤ –∏ –∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω—ã:</h3>
            
            <h4>1. For Loop:</h4>
            <pre class="code-block">
// C –∫–æ–¥:
for (int i = 0; i < 10; i++) {
    array[i] = i * 2;
}

; –ê—Å—Å–µ–º–±–ª–µ—Ä:
xor ecx, ecx           ; i = 0
.for_loop:
    cmp ecx, 10        ; i < 10?
    jge .end_loop      ; –µ—Å–ª–∏ i >= 10, –≤—ã—Ö–æ–¥–∏–º
    
    mov eax, ecx       ; eax = i
    shl eax, 1         ; eax = i * 2
    mov [rbx+rcx*4], eax ; array[i] = eax
    
    inc ecx            ; i++
    jmp .for_loop      ; –ø–æ–≤—Ç–æ—Ä—è–µ–º
.end_loop:
            </pre>
            
            <h4>2. While Loop:</h4>
            <pre class="code-block">
// C –∫–æ–¥:
while (x > 0) {
    x = x / 2;
    count++;
}

; –ê—Å—Å–µ–º–±–ª–µ—Ä:
.while_loop:
    cmp dword [rbp-0x4], 0  ; x > 0?
    jle .end_while          ; –µ—Å–ª–∏ x <= 0, –≤—ã—Ö–æ–¥–∏–º
    
    mov eax, [rbp-0x4]      ; eax = x
    sar eax, 1              ; x = x / 2 (arithmetic shift)
    mov [rbp-0x4], eax      ; —Å–æ—Ö—Ä–∞–Ω—è–µ–º x
    
    inc dword [rbp-0x8]     ; count++
    jmp .while_loop         ; –ø–æ–≤—Ç–æ—Ä—è–µ–º
.end_while:
            </pre>
            
            <h4>3. Do-While Loop:</h4>
            <pre class="code-block">
// C –∫–æ–¥:
do {
    sum += array[i];
    i++;
} while (i < size);

; –ê—Å—Å–µ–º–±–ª–µ—Ä:
.do_while:
    mov eax, [rbp-0x4]      ; eax = i
    mov edx, [rbx+rax*4]    ; edx = array[i]
    add [rbp-0x8], edx      ; sum += edx
    
    inc dword [rbp-0x4]     ; i++
    
    mov eax, [rbp-0x4]      ; eax = i
    cmp eax, [rbp-0xc]      ; i < size?
    jl .do_while            ; –µ—Å–ª–∏ –¥–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º
            </pre>
            
            <h3>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–∏–∫–ª–æ–≤:</h3>
            
            <h4>Loop Unrolling (—Ä–∞–∑–≤—ë—Ä—Ç–∫–∞):</h4>
            <pre class="code-block">
; –û–±—ã—á–Ω—ã–π —Ü–∏–∫–ª (4 –∏—Ç–µ—Ä–∞—Ü–∏–∏)
mov ecx, 4
.loop:
    add eax, [rbx]
    add rbx, 4
    dec ecx
    jnz .loop

; –†–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π —Ü–∏–∫–ª
add eax, [rbx]
add eax, [rbx+4]
add eax, [rbx+8]
add eax, [rbx+12]
            </pre>
            
            <h4>SIMD –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:</h4>
            <pre class="code-block">
; –û–±—Ä–∞–±–æ—Ç–∫–∞ 4 float –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
movaps xmm0, [rsi]      ; –∑–∞–≥—Ä—É–∂–∞–µ–º 4 float
mulps xmm0, xmm1        ; —É–º–Ω–æ–∂–∞–µ–º –≤—Å–µ 4
movaps [rdi], xmm0      ; —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            </pre>
            
            <h3>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ü–∏–∫–ª–æ–≤:</h3>
            <pre class="code-block">
LOOP  - –¥–µ–∫—Ä–µ–º–µ–Ω—Ç ECX –∏ –ø–µ—Ä–µ—Ö–æ–¥ –µ—Å–ª–∏ ECX != 0
LOOPE - –¥–µ–∫—Ä–µ–º–µ–Ω—Ç ECX –∏ –ø–µ—Ä–µ—Ö–æ–¥ –µ—Å–ª–∏ ECX != 0 –ò ZF = 1
LOOPNE - –¥–µ–∫—Ä–µ–º–µ–Ω—Ç ECX –∏ –ø–µ—Ä–µ—Ö–æ–¥ –µ—Å–ª–∏ ECX != 0 –ò ZF = 0
REP   - –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–∫–∞ ECX != 0
REPE  - –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–∫–∞ ECX != 0 –ò ZF = 1
REPNE - –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–∫–∞ ECX != 0 –ò ZF = 0
            </pre>
            
            <h3>–ü–æ–∏—Å–∫ –≤ —Å—Ç—Ä–æ–∫–µ —Å REP:</h3>
            <pre class="code-block">
; –ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ
mov al, 'X'          ; –∏—â–µ–º —Å–∏–º–≤–æ–ª 'X'
mov rdi, string_addr ; –∞–¥—Ä–µ—Å —Å—Ç—Ä–æ–∫–∏
mov rcx, string_len  ; –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
repne scasb         ; —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë–º
je found            ; –µ—Å–ª–∏ –Ω–∞—à–ª–∏ (ZF=1)
            </pre>
        `,
        practice: `
            <h3>üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h3>
            
            <p>–î–∞–Ω –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏:</p>
            <pre class="code-block">
0x401200: push rbp
0x401201: mov rbp, rsp
0x401204: mov rsi, rdi         ; rsi = —Å—Ç—Ä–æ–∫–∞
0x401207: xor eax, eax         ; hash = 0
0x401209: xor ecx, ecx         ; i = 0
0x40120b: .loop:
0x40120b: movzx edx, byte [rsi+rcx] ; dl = str[i]
0x40120f: test dl, dl          ; –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏?
0x401211: jz .done
0x401213: imul eax, eax, 31    ; hash *= 31
0x401216: add eax, edx         ; hash += str[i]
0x401218: inc ecx              ; i++
0x401219: jmp .loop
0x40121b: .done:
0x40121b: pop rbp
0x40121c: ret
            </pre>
            
            <h4>–ó–∞–¥–∞–Ω–∏—è:</h4>
            <ol>
                <li>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è</li>
                <li>–ù–∞–ø–∏—à–∏—Ç–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –Ω–∞ C</li>
                <li>–ù–∞–π–¥–∏—Ç–µ –∫–æ–ª–ª–∏–∑–∏—é (–¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ö–µ—à–µ–º)</li>
                <li>–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è SIMD</li>
            </ol>
        `,
        solution: `
            <h3>‚úÖ –†–µ—à–µ–Ω–∏–µ</h3>
            
            <p><b>1. –ê–ª–≥–æ—Ä–∏—Ç–º:</b> Java String hashCode (–ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–π —Ö–µ—à)</p>
            
            <p><b>2. –ö–æ–¥ –Ω–∞ C:</b></p>
            <pre class="code-block">
int hash_string(const char* str) {
    int hash = 0;
    while (*str) {
        hash = hash * 31 + *str;
        str++;
    }
    return hash;
}
            </pre>
            
            <p><b>3. –ü–æ–∏—Å–∫ –∫–æ–ª–ª–∏–∑–∏–π:</b></p>
            <p>–ò–∑-–∑–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è int32, –∫–æ–ª–ª–∏–∑–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ü—Ä–∏–º–µ—Ä:</p>
            <ul>
                <li>"FB" –∏ "Ea" –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ö–µ—à</li>
                <li>–§–æ—Ä–º—É–ª–∞: –µ—Å–ª–∏ h(s1) == h(s2), —Ç–æ h(s1 + X) == h(s2 + X)</li>
            </ul>
            
            <p><b>4. SIMD –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:</b></p>
            <pre class="code-block">
; –û–±—Ä–∞–±–æ—Ç–∫–∞ 4 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑
movd xmm0, [rsi]        ; –∑–∞–≥—Ä—É–∂–∞–µ–º 4 –±–∞–π—Ç–∞
pmovzxbd xmm0, xmm0     ; —Ä–∞—Å—à–∏—Ä—è–µ–º –¥–æ dword
movdqa xmm1, [multipliers] ; 31^3, 31^2, 31^1, 31^0
pmulld xmm0, xmm1       ; —É–º–Ω–æ–∂–∞–µ–º
phaddd xmm0, xmm0       ; –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ
phaddd xmm0, xmm0
movd eax, xmm0          ; —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ eax
            </pre>
        `,
        tips: [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'display/i $pc' –≤ GDB –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
            "Loop-carried dependencies —á–∞—Å—Ç–æ –º–µ—à–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
            "Intel VTune –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –≥–æ—Ä—è—á–∏–µ —Ü–∏–∫–ª—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ"
        ]
    },

    // MEMORY MODULE
    "stack_frame": {
        title: "Stack Frame Analysis",
        difficulty: "intermediate",
        theory: `
            <h2>üìö –°—Ç–µ–∫–æ–≤—ã–µ —Ñ—Ä–µ–π–º—ã –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞</h2>
            
            <h3>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–µ–∫–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞:</h3>
            <pre class="code-block">
High Address
+------------------+
| Return Address   | <- –ê–¥—Ä–µ—Å –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
+------------------+
| Saved RBP        | <- –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π base pointer
+------------------+ <- RBP —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—é–¥–∞
| Local Variable 1 | [RBP-8]
+------------------+
| Local Variable 2 | [RBP-16]
+------------------+
| ...              |
+------------------+ <- RSP —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—é–¥–∞
Low Address
            </pre>
            
            <h3>–ü—Ä–æ–ª–æ–≥ –∏ —ç–ø–∏–ª–æ–≥ —Ñ—É–Ω–∫—Ü–∏–∏:</h3>
            <pre class="code-block">
; –ü—Ä–æ–ª–æ–≥ (Function Prologue)
push rbp           ; –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π base pointer
mov rbp, rsp       ; –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π base pointer
sub rsp, 0x20      ; –í—ã–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

; ... —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ ...

; –≠–ø–∏–ª–æ–≥ (Function Epilogue)
mov rsp, rbp       ; –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stack pointer (–∏–ª–∏ leave)
pop rbp            ; –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º base pointer
ret                ; –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É –Ω–∞ —Å—Ç–µ–∫–µ
            </pre>
            
            <h3>Calling Conventions (x86-64 System V ABI):</h3>
            <table class="data-table">
                <tr>
                    <th>–ê—Ä–≥—É–º–µ–Ω—Ç</th>
                    <th>–†–µ–≥–∏—Å—Ç—Ä</th>
                    <th>–¢–∏–ø</th>
                </tr>
                <tr><td>1</td><td>RDI</td><td>Integer/Pointer</td></tr>
                <tr><td>2</td><td>RSI</td><td>Integer/Pointer</td></tr>
                <tr><td>3</td><td>RDX</td><td>Integer/Pointer</td></tr>
                <tr><td>4</td><td>RCX</td><td>Integer/Pointer</td></tr>
                <tr><td>5</td><td>R8</td><td>Integer/Pointer</td></tr>
                <tr><td>6</td><td>R9</td><td>Integer/Pointer</td></tr>
                <tr><td>7+</td><td>Stack</td><td>–í—Å–µ —Ç–∏–ø—ã</td></tr>
                <tr><td>Float 1-8</td><td>XMM0-XMM7</td><td>Float/Double</td></tr>
                <tr><td>Return</td><td>RAX/XMM0</td><td>Integer/Float</td></tr>
            </table>
            
            <h3>Windows x64 Calling Convention:</h3>
            <pre class="code-block">
; –ü–µ—Ä–≤—ã–µ 4 –∞—Ä–≥—É–º–µ–Ω—Ç–∞: RCX, RDX, R8, R9
; Shadow space: 32 –±–∞–π—Ç–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å—Ç–µ–∫–µ
; –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å 5 –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏:

sub rsp, 0x28      ; 32 –±–∞–π—Ç–∞ shadow + 8 –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
mov rcx, arg1      ; 1-–π –∞—Ä–≥—É–º–µ–Ω—Ç
mov rdx, arg2      ; 2-–π –∞—Ä–≥—É–º–µ–Ω—Ç
mov r8, arg3       ; 3-–π –∞—Ä–≥—É–º–µ–Ω—Ç
mov r9, arg4       ; 4-–π –∞—Ä–≥—É–º–µ–Ω—Ç
mov [rsp+0x20], arg5 ; 5-–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞ —Å—Ç–µ–∫–µ
call function
add rsp, 0x28      ; –û—á–∏—â–∞–µ–º —Å—Ç–µ–∫
            </pre>
            
            <h3>Red Zone (Linux x64):</h3>
            <p>128 –±–∞–π—Ç –Ω–∏–∂–µ RSP –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</p>
            <pre class="code-block">
; –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è RSP
mov [rsp-8], rax   ; –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ red zone
mov [rsp-16], rbx  ; –ï—â—ë –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
; ...
mov rax, [rsp-8]   ; –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            </pre>
            
            <h3>Stack Canary (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è):</h3>
            <pre class="code-block">
push rbp
mov rbp, rsp
sub rsp, 0x20
mov rax, fs:0x28    ; –ó–∞–≥—Ä—É–∂–∞–µ–º canary –∏–∑ TLS
mov [rbp-8], rax    ; –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å—Ç–µ–∫–µ

; ... —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ ...

mov rax, [rbp-8]    ; –ó–∞–≥—Ä—É–∂–∞–µ–º canary —Å–æ —Å—Ç–µ–∫–∞
xor rax, fs:0x28    ; –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
jnz .stack_check_fail ; –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - stack overflow!
leave
ret

.stack_check_fail:
call __stack_chk_fail
            </pre>
        `,
        practice: `
            <h3>üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h3>
            
            <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:</p>
            <pre class="code-block">
0x401300: push rbp
0x401301: mov rbp, rsp
0x401304: sub rsp, 0x10
0x401308: mov [rbp-0x8], edi    ; —Å–æ—Ö—Ä–∞–Ω—è–µ–º n
0x40130b: cmp dword [rbp-0x8], 1
0x40130f: jg .recursive_case
0x401311: mov eax, 1            ; –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π: return 1
0x401316: jmp .end
0x401318: .recursive_case:
0x401318: mov eax, [rbp-0x8]
0x40131b: sub eax, 1
0x40131e: mov edi, eax          ; n-1
0x401320: call 0x401300         ; —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
0x401325: mov edx, [rbp-0x8]    
0x401328: imul eax, edx         ; —Ä–µ–∑—É–ª—å—Ç–∞—Ç * n
0x40132b: .end:
0x40132b: leave
0x40132c: ret
            </pre>
            
            <h4>–ó–∞–¥–∞–Ω–∏—è:</h4>
            <ol>
                <li>–ß—Ç–æ –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è?</li>
                <li>–ù–∞—Ä–∏—Å—É–π—Ç–µ —Å—Ç–µ–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º 3</li>
                <li>–ù–∞–π–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏ –¥–æ stack overflow</li>
                <li>–ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏</li>
            </ol>
        `,
        solution: `
            <h3>‚úÖ –†–µ—à–µ–Ω–∏–µ</h3>
            
            <p><b>1. –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª:</b> n!</p>
            
            <p><b>2. –°—Ç–µ–∫ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ factorial(3):</b></p>
            <pre>
            factorial(3)          factorial(2)          factorial(1)
            +-----------+         +-----------+         +-----------+
RSP+0x20 -> | ret addr  |         | ret addr  |         | ret addr  |
            +-----------+         +-----------+         +-----------+
RSP+0x18 -> | saved rbp |         | saved rbp |         | saved rbp |
            +-----------+         +-----------+         +-----------+
RSP+0x10 -> | n = 3     |         | n = 2     |         | n = 1     |
            +-----------+         +-----------+         +-----------+
RSP+0x08 -> | padding   |         | padding   |         | padding   |
            +-----------+         +-----------+         +-----------+
RSP      -> |           |         |           |         |           |
            </pre>
            
            <p><b>3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞:</b></p>
            <p>–ü—Ä–∏ —Ä–∞–∑–º–µ—Ä–µ —Å—Ç–µ–∫–∞ 8MB –∏ —Ñ—Ä–µ–π–º–µ ~32 –±–∞–π—Ç–∞: ~250,000 –≤—ã–∑–æ–≤–æ–≤</p>
            
            <p><b>4. –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è:</b></p>
            <pre class="code-block">
int factorial_iterative(int n) {
    int result = 1;
    for (int i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}

; –ê—Å—Å–µ–º–±–ª–µ—Ä:
mov eax, 1          ; result = 1
mov ecx, 2          ; i = 2
.loop:
    cmp ecx, edi    ; i <= n?
    jg .done
    imul eax, ecx   ; result *= i
    inc ecx         ; i++
    jmp .loop
.done:
    ret
            </pre>
        `,
        tips: [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'bt' –≤ GDB –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–≥–æ call stack",
            "–ö–æ–º–∞–Ω–¥–∞ 'info frame' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ—Ä–µ–π–º–∞",
            "ROP chains –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∞–¥—Ä–µ—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞"
        ]
    },

    // ADVANCED MODULE
    "function_hooking": {
        title: "Function Hooking",
        difficulty: "advanced",
        theory: `
            <h2>üé£ –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ñ—É–Ω–∫—Ü–∏–π (Hooking)</h2>
            
            <h3>–¢–∏–ø—ã —Ö—É–∫–æ–≤:</h3>
            
            <h4>1. IAT (Import Address Table) Hooking:</h4>
            <pre class="code-block">
// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ IAT –≤ PE —Ñ–∞–π–ª–µ
IMAGE_IMPORT_DESCRIPTOR {
    OriginalFirstThunk  // RVA –∫ Import Name Table
    TimeDateStamp
    ForwarderChain
    Name               // RVA –∫ –∏–º–µ–Ω–∏ DLL
    FirstThunk         // RVA –∫ Import Address Table
}

// –ü–∞—Ç—á–∏–º –∞–¥—Ä–µ—Å –≤ IAT
void* GetIATAddress(const char* dll, const char* func) {
    HMODULE base = GetModuleHandle(NULL);
    IMAGE_DOS_HEADER* dos = (IMAGE_DOS_HEADER*)base;
    IMAGE_NT_HEADERS* nt = (IMAGE_NT_HEADERS*)((BYTE*)base + dos->e_lfanew);
    IMAGE_IMPORT_DESCRIPTOR* imports = (IMAGE_IMPORT_DESCRIPTOR*)
        ((BYTE*)base + nt->OptionalHeader.DataDirectory[1].VirtualAddress);
    
    // –ò—â–µ–º –Ω—É–∂–Ω—É—é DLL –∏ —Ñ—É–Ω–∫—Ü–∏—é...
}
            </pre>
            
            <h4>2. Inline Hooking (Detour):</h4>
            <pre class="code-block">
; –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
MessageBoxA:
    mov r10, rcx      ; –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
    mov eax, 0x123    ; –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
    ...

; –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ö—É–∫–∞:
MessageBoxA:
    jmp MyHookFunction  ; 5 –±–∞–π—Ç (E9 XX XX XX XX)
    nop                 ; padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    ...

; –ù–∞—à —Ö—É–∫:
MyHookFunction:
    ; –ù–∞—à –∫–æ–¥
    push rcx
    push rdx
    call LogFunction
    pop rdx
    pop rcx
    
    ; –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    mov r10, rcx
    mov eax, 0x123
    
    ; –ü—Ä—ã–≥–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    jmp MessageBoxA+7
            </pre>
            
            <h4>3. VTable Hooking (–¥–ª—è C++ –æ–±—ä–µ–∫—Ç–æ–≤):</h4>
            <pre class="code-block">
class IInterface {
    virtual void Method1() = 0;
    virtual void Method2() = 0;
};

// VTable –≤ –ø–∞–º—è—Ç–∏:
// +0x00: —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ Method1
// +0x08: —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ Method2

// –•—É–∫–∞–µ–º:
void** vtable = *(void***)object;
DWORD oldProtect;
VirtualProtect(vtable, sizeof(void*) * 2, PAGE_READWRITE, &oldProtect);
originalMethod1 = vtable[0];
vtable[0] = &MyHookedMethod1;  // –ü–æ–¥–º–µ–Ω—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
VirtualProtect(vtable, sizeof(void*) * 2, oldProtect, &oldProtect);
            </pre>
            
            <h4>4. Syscall Hooking:</h4>
            <pre class="code-block">
; Windows syscall
NtCreateFile:
    mov r10, rcx
    mov eax, 55h      ; Syscall number
    syscall
    ret

; Linux syscall hook —á–µ—Ä–µ–∑ ptrace
ptrace(PTRACE_SYSCALL, pid, 0, 0);  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ syscall
wait(&status);
ptrace(PTRACE_GETREGS, pid, 0, &regs);  // –ß–∏—Ç–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã
if (regs.orig_rax == SYS_open) {
    // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
}
            </pre>
            
            <h3>–¢—Ä–∞–º–ø–ª–∏–Ω (Trampoline):</h3>
            <pre class="code-block">
// –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–º–ø–ª–∏–Ω –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
void* CreateTrampoline(void* original) {
    void* trampoline = VirtualAlloc(NULL, 32, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    
    // –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    memcpy(trampoline, original, 14);  // –ú–∏–Ω–∏–º—É–º 5 –±–∞–π—Ç –¥–ª—è jmp
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—ã–∂–æ–∫ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    *(BYTE*)(trampoline + 14) = 0xE9;  // JMP
    *(DWORD*)(trampoline + 15) = (DWORD)((BYTE*)original + 14 - (BYTE*)trampoline - 19);
    
    return trampoline;
}
            </pre>
            
            <h3>–ó–∞—â–∏—Ç–∞ –æ—Ç —Ö—É–∫–æ–≤:</h3>
            <ul>
                <li><b>CRC –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –∫–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏</li>
                <li><b>Direct syscalls:</b> –û–±—Ö–æ–¥ user-mode —Ö—É–∫–æ–≤</li>
                <li><b>Anti-debug:</b> –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ—Ç–ª–∞–¥—á–∏–∫–æ–≤</li>
                <li><b>Obfuscation:</b> –ó–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞</li>
            </ul>
        `,
        practice: `
            <h3>üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h3>
            
            <p>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ö—É–∫ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é malloc –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∞–ª–ª–æ–∫–∞—Ü–∏–π:</p>
            
            <pre class="code-block">
#include <stdio.h>
#include <stdlib.h>

int allocation_count = 0;
void* (*original_malloc)(size_t) = NULL;

void* hooked_malloc(size_t size) {
    allocation_count++;
    printf("[HOOK] Allocation #%d: %zu bytes\\n", allocation_count, size);
    // –í—ã–∑–æ–≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    return original_malloc(size);
}

int main() {
    // TODO: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö—É–∫ –Ω–∞ malloc
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥
    void* p1 = malloc(100);
    void* p2 = malloc(200);
    void* p3 = malloc(300);
    
    printf("Total allocations: %d\\n", allocation_count);
    
    free(p1);
    free(p2);
    free(p3);
    
    return 0;
}
            </pre>
            
            <h4>–ó–∞–¥–∞–Ω–∏—è:</h4>
            <ol>
                <li>–†–µ–∞–ª–∏–∑—É–π—Ç–µ IAT hook –¥–ª—è malloc</li>
                <li>–†–µ–∞–ª–∏–∑—É–π—Ç–µ inline hook —Å —Ç—Ä–∞–º–ø–ª–∏–Ω–æ–º</li>
                <li>–î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª</li>
                <li>–ü–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç–µ free –∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞ double-free</li>
            </ol>
        `,
        solution: `
            <h3>‚úÖ –†–µ—à–µ–Ω–∏–µ</h3>
            
            <p><b>1. LD_PRELOAD —Ö—É–∫ (Linux):</b></p>
            <pre class="code-block">
#define _GNU_SOURCE
#include <dlfcn.h>
#include <stdio.h>

static int count = 0;
static void* (*real_malloc)(size_t) = NULL;

void* malloc(size_t size) {
    if (!real_malloc) {
        real_malloc = dlsym(RTLD_NEXT, "malloc");
    }
    
    count++;
    fprintf(stderr, "[HOOK] Allocation #%d: %zu bytes\\n", count, size);
    
    return real_malloc(size);
}

// –ö–æ–º–ø–∏–ª—è—Ü–∏—è: gcc -shared -fPIC hook.c -o hook.so -ldl
// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: LD_PRELOAD=./hook.so ./program
            </pre>
            
            <p><b>2. Inline hook —Å MinHook (Windows):</b></p>
            <pre class="code-block">
#include <MinHook.h>

void* (*fpMalloc)(size_t) = NULL;

void* DetourMalloc(size_t size) {
    allocation_count++;
    printf("[HOOK] Malloc: %zu bytes\\n", size);
    return fpMalloc(size);  // –í—ã–∑–æ–≤ —á–µ—Ä–µ–∑ —Ç—Ä–∞–º–ø–ª–∏–Ω
}

void InstallHook() {
    MH_Initialize();
    MH_CreateHook(&malloc, &DetourMalloc, (LPVOID*)&fpMalloc);
    MH_EnableHook(&malloc);
}
            </pre>
            
            <p><b>3. –ü—Ä–æ–≤–µ—Ä–∫–∞ double-free:</b></p>
            <pre class="code-block">
#include <unordered_set>

std::unordered_set<void*> freed_pointers;

void hooked_free(void* ptr) {
    if (freed_pointers.count(ptr)) {
        printf("[ERROR] Double free detected: %p\\n", ptr);
        abort();
    }
    freed_pointers.insert(ptr);
    original_free(ptr);
}
            </pre>
        `,
        tips: [
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Detours library –æ—Ç Microsoft –¥–ª—è Windows hooking",
            "frida - –º–æ—â–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
            "strace/ltrace –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∏ library calls"
        ]
    },

    "anti_debugging": {
        title: "Anti-Debugging Techniques",
        difficulty: "advanced",
        theory: `
            <h2>üõ°Ô∏è –ê–Ω—Ç–∏–æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏</h2>
            
            <h3>1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–æ–≤ –æ—Ç–ª–∞–¥–∫–∏:</h3>
            
            <h4>Windows - PEB (Process Environment Block):</h4>
            <pre class="code-block">
; –ü—Ä–æ–≤–µ—Ä–∫–∞ BeingDebugged —Ñ–ª–∞–≥–∞
mov rax, gs:[60h]    ; PEB –≤ x64
movzx eax, byte [rax+2]  ; BeingDebugged
test eax, eax
jnz debugger_detected

; –ü—Ä–æ–≤–µ—Ä–∫–∞ NtGlobalFlag
mov rax, gs:[60h]
mov eax, [rax+0BCh]  ; NtGlobalFlag
and eax, 70h         ; FLG_HEAP_*, FLG_STACK_*
test eax, eax
jnz debugger_detected
            </pre>
            
            <h4>Linux - TracerPid:</h4>
            <pre class="code-block">
// –ß—Ç–µ–Ω–∏–µ /proc/self/status
char line[256];
FILE* f = fopen("/proc/self/status", "r");
while (fgets(line, sizeof(line), f)) {
    if (strncmp(line, "TracerPid:", 10) == 0) {
        int pid = atoi(line + 10);
        if (pid != 0) {
            // –û—Ç–ª–∞–¥—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω
        }
    }
}
            </pre>
            
            <h3>2. Timing checks:</h3>
            <pre class="code-block">
; RDTSC - Read Time-Stamp Counter
rdtsc
mov r8, rax
mov r9, rdx

; –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –∫–æ–¥
call protected_function

rdtsc
sub rax, r8
sbb rdx, r9
; –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ > threshold, –æ—Ç–ª–∞–¥—á–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω
cmp rax, 0x100000
ja debugger_detected
            </pre>
            
            <h3>3. Breakpoint detection:</h3>
            <pre class="code-block">
; –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ INT3 (0xCC)
mov rsi, function_to_check
mov ecx, function_size
.scan_loop:
    lodsb
    cmp al, 0xCC
    je breakpoint_found
    loop .scan_loop

; –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ breakpoints (DR0-DR3)
mov rax, dr0
or rax, dr1
or rax, dr2
or rax, dr3
test rax, rax
jnz hardware_bp_found
            </pre>
            
            <h3>4. Exception-based detection:</h3>
            <pre class="code-block">
; –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SEH handler
push .exception_handler
push fs:[0]
mov fs:[0], rsp

; –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
xor eax, eax
div eax  ; Division by zero

; –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å - –æ—Ç–ª–∞–¥—á–∏–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
jmp debugger_detected

.exception_handler:
    ; –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    mov eax, [esp+0Ch]  ; CONTEXT
    add dword [eax+0B8h], 2  ; Skip div instruction
    xor eax, eax  ; ExceptionContinueExecution
    ret
            </pre>
            
            <h3>5. Self-modifying code:</h3>
            <pre class="code-block">
; –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
mov rsi, encrypted_code
mov rdi, rsi
mov rcx, code_size
mov al, 0x42  ; XOR key
.decrypt_loop:
    xor [rsi], al
    inc rsi
    loop .decrypt_loop

; –¢–µ–ø–µ—Ä—å –∫–æ–¥ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
jmp encrypted_code
            </pre>
            
            <h3>6. API hooks detection:</h3>
            <pre class="code-block">
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã—Ö –±–∞–π—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
BYTE* func = (BYTE*)GetProcAddress(GetModuleHandle("ntdll.dll"), "NtQueryInformationProcess");
if (func[0] == 0xE9 || func[0] == 0xFF) {
    // Hook detected (JMP instruction)
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —á–∏—Å—Ç–æ–π –∫–æ–ø–∏–µ–π –∏–∑ —Ñ–∞–π–ª–∞
HANDLE file = CreateFile("C:\\\\Windows\\\\System32\\\\ntdll.dll", ...);
// –ß–∏—Ç–∞–µ–º –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º...
            </pre>
            
            <h3>7. Virtual machine detection:</h3>
            <pre class="code-block">
; CPUID –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–∏–ø–µ—Ä–≤–∏–∑–æ—Ä–∞
mov eax, 1
cpuid
test ecx, 80000000h  ; Hypervisor bit
jnz vm_detected

; –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è VM —Å—Ç—Ä–æ–∫
mov eax, 40000000h
cpuid
; EBX, ECX, EDX —Å–æ–¥–µ—Ä–∂–∞—Ç "KVMKVMKVM" –¥–ª—è KVM
; –∏–ª–∏ "VMwareVMware" –¥–ª—è VMware
            </pre>
            
            <h3>–û–±—Ö–æ–¥ –∞–Ω—Ç–∏–æ—Ç–ª–∞–¥–∫–∏:</h3>
            <ul>
                <li>–ü–∞—Ç—á–∏–Ω–≥ –ø—Ä–æ–≤–µ—Ä–æ–∫ (NOP –∏–ª–∏ JMP)</li>
                <li>–•—É–∫–∏ –Ω–∞ API —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏</li>
                <li>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ hypervisor-based –æ—Ç–ª–∞–¥—á–∏–∫–æ–≤</li>
                <li>ScyllaHide –ø–ª–∞–≥–∏–Ω –¥–ª—è x64dbg</li>
            </ul>
        `,
        practice: `
            <h3>üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h3>
            
            <p>–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—É—é –∑–∞—â–∏—Ç—É:</p>
            <pre class="code-block">
#include <stdio.h>
#include <windows.h>

void secret_function() {
    printf("Secret unlocked!\\n");
}

int main() {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º 3 –∞–Ω—Ç–∏–æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    // –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –∫–æ–¥
    int key = 0;
    printf("Enter key: ");
    scanf("%d", &key);
    
    if (key == 1337) {
        secret_function();
    }
    
    return 0;
}
            </pre>
            
            <h4>–ó–∞–¥–∞–Ω–∏—è:</h4>
            <ol>
                <li>–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É IsDebuggerPresent</li>
                <li>–†–µ–∞–ª–∏–∑—É–π—Ç–µ timing check —Å RDTSC</li>
                <li>–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ breakpoints</li>
                <li>–û–±—Ñ—É—Å—Ü–∏—Ä—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª—é—á–∞</li>
                <li>–û–±–æ–π–¥–∏—Ç–µ —Å–≤–æ—é –∂–µ –∑–∞—â–∏—Ç—É</li>
            </ol>
        `,
        solution: `
            <h3>‚úÖ –†–µ—à–µ–Ω–∏–µ</h3>
            
            <p><b>–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—Ç—ã:</b></p>
            <pre class="code-block">
#include <intrin.h>

// Anti-debug macro
#define ANTI_DEBUG() do { \\
    if (IsDebuggerPresent()) exit(1); \\
    if (CheckRemoteDebuggerPresent(GetCurrentProcess(), &dbg) && dbg) exit(1); \\
    if (timing_check()) exit(1); \\
} while(0)

bool timing_check() {
    unsigned __int64 start = __rdtsc();
    Sleep(100);  // –ù–æ—Ä–º–∞–ª—å–Ω–æ ~100ms
    unsigned __int64 end = __rdtsc();
    
    // –ü—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –±—É–¥–µ—Ç –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ
    return (end - start) > 500000000;
}

bool check_breakpoints() {
    BYTE* addr = (BYTE*)secret_function;
    for (int i = 0; i < 100; i++) {
        if (addr[i] == 0xCC) return true;  // INT3
    }
    return false;
}

// –û–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
bool check_key(int input) {
    int magic = 0x539;  // 1337 –≤ hex
    magic = ((magic << 2) | (magic >> 30));  // ROL 2
    magic ^= 0xDEADBEEF;
    magic = ((magic << 2) | (magic >> 30));
    magic ^= 0xDEADBEEF;
    
    int transformed = input;
    transformed = ((transformed << 2) | (transformed >> 30));
    transformed ^= 0xDEADBEEF;
    transformed = ((transformed << 2) | (transformed >> 30));
    transformed ^= 0xDEADBEEF;
    
    return magic == transformed;
}

int main() {
    BOOL dbg = FALSE;
    
    ANTI_DEBUG();
    
    if (check_breakpoints()) {
        printf("Breakpoint detected!\\n");
        exit(1);
    }
    
    // XOR encrypted code
    BYTE encrypted[] = {0x1F, 0x2E, 0x3D, ...};  // XOR'ed opcodes
    for (int i = 0; i < sizeof(encrypted); i++) {
        encrypted[i] ^= 0x42;
    }
    
    // Execute decrypted code
    void (*func)() = (void(*)())encrypted;
    func();
    
    return 0;
}
            </pre>
            
            <p><b>–û–±—Ö–æ–¥ –∑–∞—â–∏—Ç—ã:</b></p>
            <ol>
                <li>–ü–∞—Ç—á–∏–º IsDebuggerPresent: <code>mov eax, 0; ret</code></li>
                <li>–•—É–∫–∞–µ–º __rdtsc –¥–ª—è —Ñ–µ–π–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π</li>
                <li>–ò—Å–ø–æ–ª—å–∑—É–µ–º hardware breakpoints –≤–º–µ—Å—Ç–æ INT3</li>
                <li>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ñ—É—Å–∫–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏</li>
            </ol>
        `,
        tips: [
            "TitanHide - kernel driver –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–Ω—Ç–∏–æ—Ç–ª–∞–¥–∫–∏",
            "x64dbg + ScyllaHide –æ–±—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VM snapshots –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
        ]
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ UI
window.FULL_LESSONS = FULL_LESSONS;
